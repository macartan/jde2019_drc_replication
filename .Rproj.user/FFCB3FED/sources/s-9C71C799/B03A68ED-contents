---
title: 'Institutional Change by Imitation: Demonstrating the Practice of Democracy in Congolese Villages'
author: "Authors: Anonymous"
date: "July 2, 2018"
output:
  html_document:
    number_sections: yes
    theme: united
    toc: yes
    toc_depth: 3
  pdf_document:
    number_sections: yes
    toc: yes
    toc_depth: 3
---

```{r setup, include=FALSE}
rm(list=ls(all=TRUE)) 
gc()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

This .Rmd file replicates the core analysis as well as additional results. Data can be found online.^[Data available online: https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/BSASJR] Analyses are run directly from the website or locally from datafolder "Data". Supporting code can be found in folder "Code". The code outputs tables and figures into the folder "Output", which are then sourced in from the Latex file.

# Replication Setup

```{r, include = FALSE}

# Load (and install when necessary) packages
  # Possibly necessary installations:
  # devtools::install_github("iqss/dataverse-client-r")

library("pacman")
pacman::p_load(rgdal,raster,plyr,AER,devtools,doBy,dplyr,energy,entropy,foreign,gdata,ggplot2,ggthemes,grid,gridExtra,haven,ivpack,lmtest,magrittr,maps,maptools,mosaic,multiwayvcov,pander,parallel,plm,R.matlab,reshape2,sandwich,SDMTools,spdep,stargazer,tidyr,xtable,SDMTools, estimatr, knitr,readstata13, rio, DeclareDesign)

# List indicators of main outcome (capture)

capture_var_names <- c(
  "Financial Irregularities",
  "Embezzlement (direct)",
  "Embezzlement (list experiment)",
  "Inequality of (Private) Benefits",
  "Dominance of Chief's Preferences")

# List indicators of mechanisms (participation, accountability, transparency, efficiency)

mech_var_names = c(
  "Meeting Attendance",
  "Interventions in Meeting",
  "Dominance of Men in Discussion",
  "Participatory Selection Methods",
  "Committee Composition",
  "Accountability Mechanisms", 
  "Private Complaints", 
  "Knowledge of Project Amount",
  "Willingness to Seek Information",
  "Quality of Accounting",
  "Information Transmission")

varnames <- c(capture_var_names, mech_var_names)
varnames2 <- paste(rbind(varnames, rep("",length(varnames))))

# Options
options(xtable.comment = FALSE)
panderOptions("table.style", "rmarkdown")
panderOptions("digits",  4)
panderOptions("table.split.table", 140)
panderOptions("table.caption.prefix","")

```

## Options

```{r, include =FALSE}

# load data locally (TRUE) or from dataverse (FALSE)
 local_data <- TRUE
 local_datapath = "Data"
 
# save figure and tables to output folder
#  saving <- TRUE
#  output_folder <- "Output"

# Set number sims used for calculating propensities and for the ri
spilloversims <- 5000 #5,000 but that takes a long time

run_MDE <- FALSE
```

## Run helper files

Script to create helper functions.
```{r}
source("Code/1.1 HelperFunctions.R")
source("Code/1.2 AnalysisFunction.R")
```


## Get data

```{r}
if(local_data){
  abd_vill     <- load_file("DRC2012_ABD_VILL_v2.dta")
  abd_ind      <- load_file("DRC2012_ABD_INDIV_v2.dta")
  tuungane     <- load_file("TUUNGANE_v2.dta")
  irc_tuungane <- load_file("tuungane_chief_irc.dta")
  audit        <- load_file("DRC2012_D_AUDIT_v2.dta")
  V5           <- load_file("v5.dta")
  abd_disc     <- load_file("DRC2012_A_DISC_v2.dta")
  roster       <- load_file("DRC2012_D_ROSTER_v2.dta")
  v8           <- load_file("v8.dta")
  GPS          <- load_file("gps/gps_tuungane.dta")#[,-3]
  cdcdata      <- load_file("gps/IDV_WEIGHTS_201203.dta")
  col          <- readOGR(dsn = paste0(local_datapath, "/shapefiles"), "collectivite")
  D            <- load_file("Dates_medians.dta")
}else{
  source("00 getdata")
  V5 <- load_file("v5.dta")
  irc_tuungane <- load_file("tuungane_chief_irc.dta")
  v8 <- load_file("v8.dta")
  GPS <- load_file("gps/gps_tuungane.dta")
  cdcdata <- load_file("gps/IDV_WEIGHTS_201203.dta")
  D <- load_file("Dates_medians.dta")
}
```


## Prepare dataset and variables

Script prepares data and variables for analysis.
```{r}
# Prepare the datasets for analyses
# Merge subgroup data, treatment info, lottery info, etc. to the datasets
source("Code/2.1 PrepDatasets.R")

# Prepare variables for analyses
source("Code/2.2.1 PrepMeasuresCapture.R")
source("Code/2.2.2 PrepMeasuresParticipation.R")
source("Code/2.2.3 PrepMeasuresAccountability.R")
source("Code/2.2.4 PrepMeasuresTransparency.R")
source("Code/2.2.5 PrepMeasuresEfficiency.R")
source("Code/3.1 Prep Data for Balance Tests.R")
source("Code/7.1 Prep Spillovers.R")
```

# Table 5: Balance Table

```{r}
# Balance variables
BALANCE_VARS <- c(DIST   = "distance",
                  VILL   = "mineral_index",
                  PUBLIC = "public2006",
                  VILL   = "former_chief_elec",
                  MIG    = "mig2006",  
                  STATS  = "age"
                  )

# Balance datasets
BALANCE <- lapply(list(DIST, VILL, PUBLIC, VILL, MIG,  STATS),
                  merge, select(ABD_VILL, IDV, TUUNGANE, PWEIGHT2),  by = "IDV")

# Balance table
balance.table <- sapply(1:length(BALANCE), function(i){
  data <- BALANCE[[i]]
  Y    <- BALANCE_VARS[i]
  balance_function(data[,Y][],
                   data[,"TUUNGANE"][], 
                   data[,"PWEIGHT2"][])}) %>% 
  round(., 2) %>% 
  t()
```

```{r, echo=FALSE}
tab <- as.data.frame(balance.table)
row.names(tab) <- c("Distance from major urban center", "Mineral index",
                    "Presence infrastructure in 2006", "Former chief popular choice",
                    "In-migration in 2006", "Age")

kable(tab, col.names = c("Control", "Tuungane", "d-stat", "N"))     
```

# Table X: Balance Table (RAPID)

```{r}
# Balance variables
BALANCE_VARS <- c(DIST   = "distance",
                  VILL   = "mineral_index",
                  PUBLIC = "public2006",
                  VILL   = "former_chief_elec",
                  MIG    = "mig2006",  
                  STATS  = "age"
                  )

# Balance datasets
BALANCE <- lapply(list(DIST, VILL %>% select(-IDV_RAPID), PUBLIC, VILL %>% select(-IDV_RAPID), MIG,  STATS),
                  function(x) merge(x, select(ABD_VILL, IDV, IDV_RAPID, IPW_RAPID), 
                                    by = "IDV"))

# Balance table
balance.table <- sapply(1:length(BALANCE), function(i){
  data <- BALANCE[[i]]
  Y    <- BALANCE_VARS[i]
  balance_function(data[,Y][],
                   data[,"IDV_RAPID"][], 
                   data[,"IPW_RAPID"][]
                   )}) %>% 
  round(., 2) %>% 
  t()
```

```{r, echo=FALSE}
tab <- as.data.frame(balance.table)
row.names(tab) <- c("Distance from major urban center", "Mineral index",
                    "Presence infrastructure in 2006", "Former chief popular choice",
                    "In-migration in 2006", "Age")

kable(tab, col.names = c("Control", "RAPID", "d-stat", "N"))     
```

```{r, include = FALSE}
source("Code/3.2 Format Balance Tests.R")
```

# Table 3: Main results

```{r}
main_results <- list(
      
  fin_irregul  =  lm_robust(as.formula("da109_not_verifiable ~ TUUNGANE"),
                            data     =  D_AUDIT_NOTVERI, 
                            weights  = WEIGHT),

embezzl_dir  = lm_robust(as.Formula("qr026i_fund_misuse ~ TUUNGANE"),
                          data     = ABD_INDIV_DIRECT, 
                          weights  = WEIGHT, 
                          clusters = IDS_CDCCODE ),

embezzl_list = lm_robust(as.formula("qr2729_list_experiment  ~ TUUNGANE + RA + RA*TUUNGANE"), 
                          data     = ABD_INDIV_LIST,
                          weights  = WEIGHT,
                          clusters = IDS_CDCCODE),

ineq_benef   = lm_robust(as.formula("stdev_benefits ~ TUUNGANE"), 
                          data     = ABD_INDIV_BEN,
                          weights  = WEIGHT ),

chief_domin  = lm_robust(as.formula("Correct_D_projet ~ TUUNGANE + CHIEF + CHIEF*TUUNGANE"), 
                          data     = CHIEF_DOM,
                          clusters = IDS_CDCCODE,
                          weights  = WEIGHT))

main_table <- mapply(function(x, name)  { 
                tidy = tidy.lm_robust(x); rownames(tidy) = tidy$term;
                
               if( name ==  "embezzl_list" | name == "chief_domin" ) 
                 round(c(Control   = tidy[3, "estimate"],  
                         Effect    = tidy[4, "estimate"],  
                         std_error = tidy[4, "std.error"],
                         N         = x$N), 3)
                else
                 round(c(Control  = tidy["(Intercept)", "estimate"],
                        Effect    = tidy["TUUNGANE", "estimate"], 
                        std_error = tidy["TUUNGANE", "std.error"], 
                        N         = x$N ),3)
                
                }, main_results, names(main_results))

kable(t(main_table))
```

# Table 4: Mechanisms

```{r}
mechanisms <- list(
  part  =  lm_robust(as.formula("PART_A1   ~ TUUNGANE"),
                     data = ABD_VILL_ATTEND_7, weights = WEIGHT),
 inter =  lm_robust(as.formula("N_INTERV  ~ TUUNGANE"),
                    data = AB_DISC, weights = WEIGHT),
 male_d = lm_robust(as.formula("MALE_DOM  ~ TUUNGANE"),
                    data = AB_DISC, weights = WEIGHT),
 sel    = lm_robust(as.formula("MFI_SELECTION ~ TUUNGANE"),
                    data = ABD_VILL_SEL, weights = WEIGHT),
 compos = lm_robust(as.formula("MFI_COMPOSITION ~ TUUNGANE"),
                    data = ABD_VILL_1, weights = WEIGHT),
 mech   = lm_robust(as.formula("MFI_MECHANISMS  ~ TUUNGANE"),
                    data  = ABD_MERGE, weights = WEIGHT),
 compl = lm_robust(as.formula("MFI_COMPLAINTS ~ TUUNGANE"),
                   data =  ABD_INDIV_COMPLAINTS, weights = WEIGHT, clusters = IDS_CDCCODE ),
 corr  = lm_robust(as.formula("qr002CORRECT   ~ TUUNGANE"),
                   data =  ABD_INDIV_KNOWS, weights = WEIGHT, clusters = IDS_CDCCODE ),
 accep = lm_robust(as.formula("qi003_accept  ~ TUUNGANE"),
                   data =  ABD_INDIV_SEEKS, weights = WEIGHT, clusters = IDS_CDCCODE ),
 accoun = lm_robust(as.formula("MFI_ACCOUNTING ~ TUUNGANE"),
                    data  = D_AUDIT_ACCOUNT, weights = WEIGHT),
 transm = lm_robust(as.formula("SUM_HEALTH_INFO ~ TUUNGANE + IDS_RAPID + IDS_RAPID*TUUNGANE"),
                    data = ABD_INDIV_HEALTH, weights = WEIGHT, clusters = IDS_CDCCODE))

mechanisms_table <- mapply(function(x, name){ 
                    tidy = tidy.lm_robust(x); rownames(tidy) = tidy$term;
                   if( name ==  "transm" ) 
                     round(c(Control   = tidy["IDS_RAPID",           "estimate"],  
                             Effect    = tidy["TUUNGANE:IDS_RAPID",  "estimate"],  
                             std_error = tidy["TUUNGANE:IDS_RAPID", "std.error"],
                             N         = x$N), 3)
                    else
                     round(c(Control  = tidy["(Intercept)", "estimate"],
                            Effect    = tidy["TUUNGANE", "estimate"], 
                            std_error = tidy["TUUNGANE", "std.error"], 
                            N         = x$N ),3)
                    
                    }, mechanisms, names(mechanisms))

kable(t(mechanisms_table))
```

```{r, include=FALSE}
source("Code/4.1 MainResults.R")
```

# Tables X and X: Robustness and heterogeneity

```{r, include = TRUE, eval=FALSE}
source("Code/4.2 RobustResults.R")
```

# Table 6: Summary statistis


```{r}

outcomes <- c("RAPID", "TUUNGANE", "da109_not_verifiable", "qr026i_fund_misuse",
       "qr2729_list_experiment","stdev_benefits", "Correct_D_projet",
       "PART_A1", "N_INTERV", "MALE_DOM", "MFI_SELECTION", "MFI_COMPOSITION", 
       "MFI_MECHANISMS","MFI_COMPLAINTS", "qr002CORRECT", "qi003_accept", 
       "MFI_ACCOUNTING", "SUM_HEALTH_INFO")

datasets <- list(cdcdata, cdcdata, D_AUDIT_NOTVERI, 
          ABD_INDIV_DIRECT,ABD_INDIV_LIST,ABD_INDIV_BEN,
          CHIEF_DOM, ABD_VILL_ATTEND_7, AB_DISC,  AB_DISC,
          ABD_VILL_SEL, ABD_VILL_1,  ABD_MERGE,ABD_INDIV_COMPLAINTS,                         
          ABD_INDIV_KNOWS, ABD_INDIV_SEEKS, D_AUDIT_ACCOUNT, ABD_INDIV_HEALTH)


sumStats <- mapply(function(y, d){
  
  IDVs <- cdcdata[,"IDV"]
  
  if(y == "qr2729_list_experiment" | y == "Correct_D_projet"){
   
     # subset interactions
    if(y == "qr2729_list_experiment")   {i0 <- d$RA    == 0;i1 <- d$RA    == 1}
    if(y == "Correct_D_projet") {i0 <- d$CHIEF == 0; i1 <- d$CHIEF == 1}
    
    # compute subsetted villmeans 
    villmean_0 <- aggregate(d[i0,c("IDV",y)], by= list(d$IDV[i0]), FUN="mean", na.rm=TRUE) %>%
                  select(IDV, X_0 = y)
    villmean_1 <- aggregate(d[i1,c("IDV",y)], by= list(d$IDV[i1]), FUN="mean", na.rm=TRUE)%>%
                  select(IDV, X_1 = y)
    
    # Clean up interactions -- Impute means where one side has data present
    villmean    <- merge(IDVs, villmean_0, by = "IDV", all.x = TRUE) %>%
                   merge(villmean_1 ,by = "IDV", all.x = TRUE) %>%
                   mutate(X_1 = ifelse(is.na(X_1)& !is.na(X_0), mean(X_1, na.rm = TRUE), X_1),
                          X_0 = ifelse(!is.na(X_1)&!is.na(X_0), mean(X_0, na.rm = TRUE), X_0),
                           X  = X_1 - X_0)

} else {
      
  villmean <-  aggregate(d[,c("IDV",y)], by= list(d$IDV), FUN="mean", na.rm=TRUE) %>%
                  select(IDV, X = y)
 
}
  with(villmean,
  c( N = sum(!is.na(X)), mean = mean(X, na.rm = T), sd = sd(X, na.rm = T) , min = min(X, na.rm = T), max =max(X, na.rm = T)))
},y = outcomes, datasets)

```

```{r, echo=FALSE}
source("Code/5 SumStats.R")
kable(t(sumStats ), digits = 2 )
```

# Tables 7 and 8: Spillovers

```{r, include = TRUE}
# Generate village level data
villmeans2 <- villmeans[,c(1, 8:23)]
gpsvars    <- names(villmeans2)[-1]
gps <- gps[,-3]
gps <- merge(gps, villmeans2, by = "IDV", all.x = TRUE)

# spillover at 5km threshold
analysis05 <- sapply(gpsvars, function(j) ri.analysis(gps[j][[1]], IND = gps$indirect05, indirects=ind05, weight = gps$gps_weight05, f_w = gen_weight05, spilloversims = spilloversims))
CONTENT05 <- round(t(analysis05),2)

# spillover at 20km threshold
analysis20 <- sapply(gpsvars, function(j) ri.analysis(gps[j][[1]], IND = gps$indirect20, indirects=ind20, weight = gps$gps_weight20, f_w = gen_weight20, spilloversims = spilloversims))
CONTENT20 <- round(t(analysis20),2)

kable(CONTENT05, title = "Spillovers at 5km")
kable(CONTENT20, title = "Spillovers at 20km")
```

```{r, echo=FALSE}
source("Code/7 Spillovers.R")
```

# Table 9: Social desirability

```{r, echo = FALSE, eval=FALSE}
source("Code/6 SocDesirability.R")
```

# Figure 1: Tuungane Map

```{r}
gps <- GPS
coordinates(gps) <- gps[,c("longitude","latitude")]
proj4string(gps) <- CRS("+init=epsg:4326")

col <- spTransform(col, CRSobj = CRS(proj4string(gps)))

#generate plot
xlim <- gps@bbox[1,] + c(3, 0)
ylim <- gps@bbox[2,] + c(-1, 1)

map_tuungane <- function(){
  par(mar = c(0.5, 0.5, 0.5, 0.5))
  plot(col, xlim = xlim, ylim = ylim, lwd = .1)
  plot(gps, add=TRUE, pch = c(1,16)[factor(gps$TUUNGANE)], cex = .4, lwd = .7)
  box()
  scalebar(200, xy = c(30, -11.5), type = "bar", below = "km", lwd = 3, divs = 3, cex = .8)
  legend(29.6, -9, legend=c("Tuungane", "Control"),
         pch = c(16, 1), bty = "n",
         cex = .8, pt.cex = 1.2, text.width = 1.5, y.intersp = 1, x.intersp = .8, inset=0.05)
}

map_tuungane()

pdf("Output/Fig_Tuungane_chefferies.pdf", width = 3, height = 5)
map_tuungane()
dev.off()

```

# Figure 3: Timeline

```{r, include = TRUE}
source("Code/10 Fig_Timeline.R")
fig_timeline()
```

# Figure 4: Main effects

```{r, echo=FALSE}
source("Code/8 Fig_Effects.R")
fig_main()
```

# Figure 5: Mechanisms

```{r, echo=FALSE}
fig_mechanisms()
```

# Figure 6: Spillovers

```{r, include = TRUE}
source("Code/9 Fig_Spillovers.R")
fig_spillovers()
```

# Figure 7: Minimal Detectable Effects

```{r, child='Code/X_Fig_MDE.Rmd', eval=run_MDE}
```

![](Output/Fig_MDE.pdf)
