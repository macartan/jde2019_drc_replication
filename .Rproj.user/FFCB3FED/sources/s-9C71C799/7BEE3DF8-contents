---
title: "MDE"
date: "May 2018"
output: html_document
---

```{r setup, include=FALSE}
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(DeclareDesign)
library(knitr)
library(dplyr)
library(tidyr)
library(lfe)
library(DesignLibrary)
library(gdata)
set.seed(1)
sims = 400

```

# Calculate arguments to generate correct ICCs

Generate base data for design declaration using observed control data

```{r}
source("../../0a_functions_main.R")
load("../../data/temp/madat.Rda")

madat$Ni <- (madat %>%
    group_by(ctry) %>%
    mutate(Ni = Q - P,
           Ni = Ni/sd(Ni, na.rm = TRUE )) %>%
    ungroup())$Ni
madat <- mutate(madat, Ni = ifelse(ctry == "mex", Q/sd(Q[ctry == "mex"], na.rm = TRUE), Ni))

# Control
data_1 <- filter(madat, treat == 0) %>%
  select(ctry, fe, cl, m1, m3, ma_id, paired_block, ug2_councilor_dummy, N_good, ug2_contested, inv_wts, inv_wts2, Ni, m14, m17, m18, m20, m21, m22, m24, m26, m27) 


data_2 <- mutate(data_1,cl = paste("doppel", cl), ma_id = paste("doppel", ma_id))

data <- bind_rows(data_1, data_2)

rm(madat, data_1, data_2)

hist(data$Ni)

# keep(data, estimates)
```

Get ICCs

```{r}
get_ICC <- function(df, dv = "m1"){
  df$dv  <- df[, dv]                         # dep var
  df$e   <- with(df, dv - ave(dv, fe, FUN = function(x) mean(x, na.rm = TRUE)))     # residual
  df$e2  <- with(df, e - ave(e, cl, FUN = function(x) mean(x, na.rm = TRUE)))
  1 - var(df$e2, na.rm = TRUE)/var(df$e, na.rm = TRUE)
}

```

Now choose a parameter that returns a reasonable ICC given what we know about the data

```{r}

ICC_given_gamma <- function(gamma, df = data, dv = "m1"){
  df$p_b <- ave(df[,dv], df$fe)           # Block level probability
  df <- fabricate(data = df,
                  cl = modify_level(u = gamma*rnorm(N), p_c = pnorm(qnorm(p_b) + u)),
                  ma_id  = modify_level(y = draw_binary(p_c)))
  get_ICC(df, dv = "y")
}


```

Some reasonable solutions (should be automated):

```{r, warning = FALSE}
kable(data.frame(
  m1_actual = get_ICC(data, dv = "m1"),
  m1_simuld = ICC_given_gamma(.72, df = data, dv = "m1"),
  m3_actual = get_ICC(data, dv = "m3"),
  m3_simuld = ICC_given_gamma(3.5, df = data, dv = "m3")
))

```


#  Metaketa DeclareDesign Designer

We want to define a  design with effects operating in  terms of constant shifts in latent variable. Estimand and estimates however are defined in  probabilities 

We define  a designer function which simply creates a design given some parameters of interest. 

```{r, error = TRUE}

metaketa_1_designer <- 
  function(delta = 0, gamma = .8, df = data, depvar = "m1", 
           exclude_councilors = FALSE, cov = "m14i+m17i+m18i+m20i+m21i+m22i+m24i+m26i+m27i", 
           weights = TRUE, with_N = FALSE, good = TRUE, Q_good = FALSE, country = NULL, 
           interactvar = NULL, treat1and2 = FALSE, contested_seats = TRUE,
           return_df = FALSE, skip_prep = TRUE){
    
    
    # Model
    df$Y_obs <- df[,depvar]   # The observed dependent variable
    df$p_b   <- ave(df$Y_obs, df$fe, FUN = function(x) mean(x, na.rm = TRUE))
    
    D <- declare_population(
      data = df,
      cl = modify_level(uc = gamma*rnorm(N), z_c = (qnorm(p_b) + uc)),
      ma_id = modify_level(ui = rnorm(N))
    )
    
    # Potential outcomes: fixed difference in latent variable
    Y <- declare_potential_outcomes(
      Y_Z_0 = 1*(ui < pnorm(z_c)),
      Y_Z_1 = 1*(ui < pnorm(z_c + delta*Ni))
    )
    
    # Assignment  
    # uganda 2 assignment
    assign_ug2 <- function(data){
      df      <- data %>% group_by(fe) %>% mutate(block_n = length(unique(cl))) %>% ungroup()
      small   <- (df$block_n < 15)
      highlow <- block_and_cluster_ra(blocks = data$paired_block, clusters = data$fe, prob = .5)
      equal   <- block_and_cluster_ra(data$fe, data$cl, prob = .5)
      unequal <- block_and_cluster_ra(data$fe, data$cl, prob = .8)
      Z  <- small*equal + (1-small)*(highlow*unequal + (1-highlow)*(1-unequal))
      return(Z)
    }
    
    # Data: Assignment function
    assign <- function(data){
      # General assignment
      Z    <- block_and_cluster_ra(data$fe, data$cl, prob = .5)
      # Splice in Uganda Assignment
      rug2 <- data$ctry == "ug2"
      Z[rug2] <- assign_ug2(data[rug2,])
      # Handling for Mexico blocks with no variation in treatment assignment
      alwys_0 <- data$fe %in% paste0("mex.", c(22, 49, 81, 85, 92, 107))
      Z[alwys_0] <- 0
      data$Z <- Z
      return(data)
    }
    
    Z <- declare_assignment(handler = assign)  # Assign Z
    
    R <- declare_reveal(outcome_variables = Y, assignment_variables = Z)  # Reveal Y
    
    # Missingness
    # We assume data is missing at random and replicate the observed missing 
    # data pattern in control in each simulation
    M <- declare_reveal(handler = fabricate, Y = ifelse(is.na(Y_obs), NA, Y))
    
    # Inquiry: Estimand is weighted effect 
    # any subsetting eg for countries needs to be accounted for here
    Q <- declare_estimand(ATE = mean(sapply(unique(ctry), function (j){ 
      mean(Y_Z_1[ctry == j & N_good == good] - 
           Y_Z_0[ctry == j & N_good == good], 
           na.rm = TRUE)
    }
    )), label = "Country weighted ATE"
    )
    

    # A: Answer strategy
    mk1_estimator <- function(data){
      data$treat <- data$Z
      est <- estimates(dat = data, 
                       exclude_councilors = exclude_councilors,
                       cov = cov, weights = weights, with_N = with_N,
                       good = good, Q_good = Q_good, depvar = "Y",
                       country = country, interactvar = interactvar,
                       treat1and2 = treat1and2, contested_seats = contested_seats,
                       return_df = FALSE, skip_prep = FALSE)
      statz <- as.data.frame(coef(summary(est)))[1,-3]
      names(statz) <- c("est", "se", "p")
      return(statz)
    }
    
    A <- declare_estimator(handler = tidy_estimator(mk1_estimator),
                           label = "Est with IPW, FE, Cl",
                           estimand = "ATE")
    
    
    # Design
    design <- D + Y + Z + Q + R + M + A
    
    return(design)
    
  }

```


```{r, include = FALSE, eval = FALSE}
# temp code
temp <- D() %>% Y() %>% Z() %>% R() %>% M()
head(temp)
Q(temp)    


      temp$treat <- temp$Z

      est <- estimates(dat = temp, 
                       exclude_councilors = exclude_councilors,
                       cov = cov, weights = weights, with_N = with_N,
                       good = good, Q_good = Q_good, depvar = "Y",
                       country = country, interactvar = interactvar,
                       treat1and2 = treat1and2, contested_seats = contested_seats,
                       return_df = FALSE, skip_prep = FALSE)
      statz <- as.data.frame(coef(summary(est)))
      
      
for(j in unique(df$ctry))  with(temp,  print(mean(Y_Z_1[ctry == j & N_good == good] - 
           Y_Z_0[ctry == j & N_good == good], 
           na.rm = TRUE)))

      A(temp)    

```

# Summary design

Designs for Metaketa 1 given outcomes M1 and M3 and for  good and bad  news.

**Note for us**: in the next iteration these should all be estimands / estimates in a single design.

```{r}
mk1_m1g_design <- metaketa_1_designer(delta = 0, gamma = .73, 
                                      df = data, depvar = "m1", good = TRUE)
mk1_m1b_design <- metaketa_1_designer(delta = 0, gamma = .73, 
                                      df = data, depvar = "m1", good = FALSE)
mk1_m3g_design <- metaketa_1_designer(delta = 0, gamma = 4, 
                                      df = data, depvar = "m3", good = TRUE)
mk1_m3b_design <- metaketa_1_designer(delta = 0, gamma = 4, 
                                      df = data, depvar = "m3", good = FALSE)
```

Sample data:
```{r}
kable(head(draw_data(mk1_m1g_design)), digits = 2)
```

Sample estimates:
```{r}
kable(get_estimates(mk1_m1g_design), digits = 3)
```



Sample diagnosis

```{r, error = TRUE, warning = FALSE}
diagnosis <- diagnose_design(mk1_m1g_design, sims = sims, bootstrap_sims = 0)
```



```{r, error = TRUE, echo = FALSE}
kable(reshape_diagnosis(diagnosis)[-1], digits = 2)
```


# MDE experiments

With a design in hand we can assess how it behaves differently given different modifications; we focus on different conjectured effect sizes.

To get a feel of how delta matters:

```{r, warning = FALSE}
kable(diagnose_design(redesign(mk1_m1g_design, delta = 1.5), bootstrap_sims = 0, sims = 2)[[2]])
```

```{r}
deltas = seq(0, 1.5, length = 7)
designs <- redesign(mk1_m1g_design, delta = deltas)
```

We diagnose all designs together and plot the results.

```{r, warning = FALSE}
diagnoses <- diagnose_design(designs, sims = 1, bootstrap_sims = 0)
```




```{r, echo = FALSE}
ld <- length(deltas)
# delta_lab <- rep("", ld*2)
# delta_lab[2*(1:ld)-1] <- deltas
kable(cbind(delta = deltas, reshape_diagnosis(diagnoses)), digits = 2)
```

 Bad news (one sim):
 
```{r}
designs3 <- redesign(mk1_m1b_design, delta = deltas)
diagnoses3 <- diagnose_design(designs3, sims = 1, bootstrap_sims = 0)
kable(cbind(delta = deltas, reshape_diagnosis(diagnoses3)), digits = 2)

```

## Turnout design
Tables with a single sim to check estimand range

```{r, warning = FALSE}
designs2 <- redesign(mk1_m3g_design, delta = 4*deltas)
diagnoses2 <- diagnose_design(designs2, sims = 1, bootstrap_sims = 0)
kable(cbind(delta = 5*deltas, reshape_diagnosis(diagnoses2)), digits = 2)

designs4 <- redesign(mk1_m3b_design, delta = 4*deltas)
diagnoses4 <- diagnose_design(designs4, sims = 1, bootstrap_sims = 0)
kable(cbind(delta = 5*deltas, reshape_diagnosis(diagnoses4)), digits = 2)

```

# All MDE plots

```{r, warning = FALSE}

dd <- function(design = mk1_m1g_design, scale=1){
  designs   <- redesign(design, delta = deltas*scale)
  diagnoses <- diagnose_design(designs, sims = sims, bootstrap_sims = 0)
  }

all_diagnoses <-
  list(m1g = dd(mk1_m1g_design ), 
       m1b = dd(mk1_m1b_design ),
       m3g = dd(mk1_m3g_design, scale = 7),
       m3b = dd(mk1_m3b_design, scale = 4))

# m1g
kable(all_diagnoses[[1]][[2]])

#m1b
kable(all_diagnoses[[2]][[2]])

#m3g
kable(all_diagnoses[[3]][[2]])

#m3b
kable(all_diagnoses[[4]][[2]])

mde_plot <- function(diagnoses, main = ""){
  plot(abs(diagnoses[[2]][,12]), diagnoses[[2]][,6], ylim = c(0,1), xlim = c(0,.08), 
       main = main, xlab = "ATE (Absolute value)", ylab = "power", type = "b")
  abline(a = .8, b = 0)
  }

pdf("MDEs_w_cov.pdf")
  par(mfrow = c(2,2))
  mde_plot(all_diagnoses[[1]], main = "(a) Vote for incumbent, good news")
  mde_plot(all_diagnoses[[2]], main = "(b) Vote for incumbent, bad news")
  mde_plot(all_diagnoses[[3]], main = "(c) Turnout, good news")
  mde_plot(all_diagnoses[[4]], main = "(d) Turnout, bad news")
dev.off()

save.image(file = "diagnoses.Rdata")


```






\includegraphics{MDEs.pdf}

# Save design

```{r}
save(mk1_m1g_design, mk1_m1b_design, mk1_m3g_design, mk1_m3b_design, file = "Metaketa1_Designs.Rdata")
```

# Issue with design sharing

```{r, error = TRUE}
rm(list = ls())
load("Metaketa1_Designs.Rdata")
get_estimates(mk1_m1g_design)
```